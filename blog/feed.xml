<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-07-26T05:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Readit</title>
    <link rel="alternate" href="/blog/2013/07/26/readit/"/>
    <id>/blog/2013/07/26/readit/</id>
    <published>2013-07-26T05:00:00Z</published>
    <updated>2013-07-26T05:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;These past couple of weeks, in the limited free time that I have while doing this course, I have been building a reddit clone.  Way back in the beginning of the course, when we were learning about the basics of rails routes, we created a barebones blog app, which the class called Readit.</summary>
    <content type="html">&lt;p&gt;These past couple of weeks, in the limited free time that I have while doing this course, I have been building a reddit clone.  Way back in the beginning of the course, when we were learning about the basics of rails routes, we created a barebones blog app, which the class called Readit.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Readit1" src="/blog/feed.xmlreadit1.png" /&gt;&lt;/p&gt;

&lt;p&gt;The class discarded the app once it had served its purpose, however, I was curious to see how closely I could get it to look and function like reddit, with links, comments, users, and a voting system.&lt;/p&gt;

&lt;p&gt;When we created the initial app, we were also introduced to Devise, an engine that handles user authentication, allowing users to register for the app, maintaining the user’s session, and then log in and log out securely.  Devise also uses BCrypt to encrypt and store the users passwords.&lt;/p&gt;

&lt;p&gt;As an engine, Devise comes with a number of pre-made views for user registration and log-in.  By default, these views live in the gem and are not editable.  The first thing that I did was to import the devise views into my app using &lt;strong&gt;rails generate devise:views&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This allowed me to use bootstrap to improve the look of the log-in and registration forms.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Readit2" src="/blog/feed.xmlreadit2.png" /&gt;&lt;/p&gt;

&lt;p&gt;We had also been introduced to &lt;strong&gt;will_paginate&lt;/strong&gt;, a gem that makes paginating through Active Record queries quick and easy.  While extremely helpful, the gem does not play well with Bootstrap, and I initially had some difficulty with trying to style it.   I discovered a companion gem called &lt;em&gt;will&lt;em&gt;paginate&lt;/em&gt;bootstrap&lt;/em&gt;*, that restyles will_paginate to work with Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Readit3" src="/blog/feed.xmlreadit3.png" /&gt;&lt;/p&gt;

&lt;p&gt;A key part of Reddit functionality is the ability to upvote and downvote links and comments.  Rather than try to create this myself, I found a gem called &lt;strong&gt;thumbs_up&lt;/strong&gt;, which can turn Active Record models into objects that can be voted upon, and turns your users into voters, tracking their votes in a “votes” table in your database.  By linking to a “vote&lt;em&gt;up” or “vote&lt;/em&gt;down” path, and passing in the object as a parameter, users can assign an upvote or downvote, which can be displayed separately or as a single number, the sum of upvotes minus the sum of downvotes.  Thumbs_up allows you the option of limiting each user to 1 vote on each object, which prevents users from spamming their own posts and comments with upvotes, and downvoting others into oblivion.  I set my index view so that the links with the highest number of votes would display first, and set the show view to do the same thing with the highest voted comments.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Readit4" src="/blog/feed.xmlreadit4.png" /&gt;&lt;/p&gt;

&lt;p&gt;One of my goals with this app was for users to submit a link to a site, and other users would be able to see a preview picture of that site, before they decided to click on the link.  This was easier said than done.  Aside from having users upload their own images of the site, my options were very limited.  However, I managed to find a service called &lt;a href="http://webthumb.bluga.net/home"&gt;Webthumb&lt;/a&gt;, which provides a web service API for generating web thumbnails and full-size snapshots of websites.  The API was very well documented, and even provided a Ruby wrapper, which, while being very old and no longer maintained, still provides full functionality.&lt;/p&gt;

&lt;p&gt;When I first implemented the API, I found that it worked great.  Provided that the user fed it a valid URL, the service would crawl to the site, and create several snapshots of varying sizes, which I could access in my views.  However, I began noticing that after a period of 24 hours, my images began disappearing from the app, being replaced by that dreaded “broken image” icon.  &lt;/p&gt;

&lt;p&gt;&lt;img alt="Readit5" src="/blog/feed.xmlreadit5.png" /&gt;&lt;/p&gt;

&lt;p&gt;This was a problem for two reasons:&lt;/p&gt;

&lt;p&gt;First of all, obtaining the images was a relatively slow process.  When a user creates a post, it take the API anywhere between 1 and 2 seconds to crawl to the site and obtain an image.  This isn’t an issue if you’re only looking for one image, but if you’re on the index page and need to re-obtain all 20 thumbnails, that’s going to take a long time.  While I could theoretically use AJAX to do it asynchronously, allowing the user to continue browsing site while the images load, this would be an ugly fix.&lt;/p&gt;

&lt;p&gt;The second problem was that my free Webthumb account only allows me 100 credits each month.  Each call to the service costs one credit.  Once I reach 100 calls to the server, I can’t use the service until the start of the next month.&lt;/p&gt;

&lt;p&gt;I am still working on a fix to this problem.  My thought is that I should be able to use the service, and then write the images that it creates to an Amazon S3 server.  The images and the links they’re associated with could be stored there permanently.  After the images have been written to the S3 server, I should be able to access them directly, without needing to use the API.  Hopefully I will have some free time this weekend to test out this method.  &lt;/p&gt;

&lt;p&gt;For now, this is my front-page, complete with broken-linked images to Google.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Readit6" src="/blog/feed.xmlreadit6.png" /&gt;&lt;/p&gt;

&lt;p&gt;Each link is tied to the user who added it, and displays their personal gravatar image if they have one, as well as the local time they added the link.  My eventual goal is to turn the username into a link to the user’s profile page, displaying their email, github account, twitter, etc.&lt;/p&gt;

&lt;p&gt;Ideally I will have this completed by the end of next week.  My goal is to use this app within MakerSquare, to allow students to share coding blogs and other sites that they find useful throughout the course.  Since this first cohort is almost done with our training, it probably won’t have much use for them, but hopefully later cohorts will find it helpful.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My First Fully Functional Web App</title>
    <link rel="alternate" href="/blog/2013/07/06/myfirstfullyfunctionalwebapp/"/>
    <id>/blog/2013/07/06/myfirstfullyfunctionalwebapp/</id>
    <published>2013-07-06T05:00:00Z</published>
    <updated>2013-07-06T05:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I made my first real web app last week.   The goal was to create a Blog site, where you could create, read, update, and destroy (&lt;strong&gt;CRUD&lt;/strong&gt;) individual blog posts.  As our first real foray into fully functional web apps, the back-end was designed to be simple...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I made my first real web app last week.   The goal was to create a Blog site, where you could create, read, update, and destroy (&lt;strong&gt;CRUD&lt;/strong&gt;) individual blog posts.  As our first real foray into fully functional web apps, the back-end was designed to be simple, with only one Post model, but even so, initially it was a struggle to wrap our heads around how HTTP methods (&lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;POST&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;, etc.) worked, and how the router worked together with the methods, controller, and views (&lt;strong&gt;MVC&lt;/strong&gt;) to deliver the data.&lt;/p&gt;

&lt;p&gt;After class was over on Wednesday night, I made my way to Capitol Factory for their Open Hack, where I met up with my mentor, Austin Hughey.  Austin works for Engine Yard and has probably forgotten more about Ruby on Rails than I will ever know.  I had mentioned to him that I was looking for a side project to work on outside of class, and he recommended getting myself familiar with test-driven development (&lt;strong&gt;TDD&lt;/strong&gt;).  &lt;/p&gt;

&lt;p&gt;For those of you who are not accomplished web developers, test-driven design is a popular software development process where you repeat a very simple development cycle.  First, you build a test, defining what a function or piece of code should do.  Initially, that test will fail, because you haven’t written the code yet.  Next, you build out that function or code, so that when you run the test again, it should pass the test parameters.&lt;/p&gt;

&lt;p&gt;It sounds like such a simple and easy concept that initially I was a little disappointed with Austin’s suggestion.  However, at the Open Hack, he spent almost three hours teaching me a language called RSpec, a testing language designed to make test-driven development simple and effective.  After the three hours were over, I had barely scratched the surface of TDD, and had a much deeper respect for it.  &lt;/p&gt;

&lt;p&gt;Austin also showed me several other Ruby gems which will undoubtedly come in handy over the next 5 weeks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FactoryGirl&lt;/strong&gt; is a gem that comes in handy during testing, and lets you create a “factory” of ruby objects, that you can easily create for use during your testing, and then delete once your tests are done.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Web-App-1" src="/blog/feed.xmlweb-app1.png" /&gt;&lt;/p&gt;

&lt;p&gt;In the above picture you can also see the &lt;strong&gt;Faker&lt;/strong&gt; gem, which we touched upon briefly in class.  Austin showed me that Faker can create lots of different kinds of fake data for use during testing and development; names, words, paragraphs, emails, etc, which a developer really appreciates after copying and pasting “I don’t know what to write here - blah blah blah” for the millionth time to create a paragraph of text.&lt;/p&gt;

&lt;p&gt;Austin also introduced me to &lt;strong&gt;Pry&lt;/strong&gt;, a gem that allows you to pause the execution of your Ruby code, go into your console, and examine the current state of your code, all of your variables, the existing of any objects, etc.  After a brief look at the github documentation, it looks like Pry actually has a lot more useful functions that I will need to dive into at some point, however, that one function has saved me a lot of time while debugging.&lt;/p&gt;

&lt;p&gt;On Thursday, July 4th, I ended up going into the MakerSquare office, and redoing all of the tests I had created with Austin the night before, to cement them in my mind.  I also took a look at a &lt;a href="http://www.railscasts.com/episodes/417-foundation"&gt;RailsCasts&lt;/a&gt; video on ZURB’s Foundation, a front-end framework similar to Twitter Bootstrap.  At that point I had worked out all of the kinks in the back-end of my web app, but the front end was still bare-boned and under-developed.&lt;/p&gt;

&lt;p&gt;After a couple of hours of work, fiddling around with their grid system, I came up with the following.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Web-App-2" src="/blog/feed.xmlweb-app2.png" /&gt;&lt;/p&gt;

&lt;p&gt;It may just be that I have more experience with front-end design at this point, or that I have just been overloaded with Bootstrap-esque web pages, but I find Foundation to be much easier to work with.  Not once did I want to throw my laptop against the wall, which was a big development for me.&lt;/p&gt;

&lt;p&gt;For those of you who are more technically inclined, you can check out my code on my github account here: &lt;a href="https://github.com/sdrioux/Blog-App"&gt;GITHUB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To check out the front end of my app, you can try checking it out on Heroku, at silas-blog-app.herokuapp.com.  I say try because currently Heroku is being stubborn and will not display my app.  Fingers crossed it will be up and running soon.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>So tired</title>
    <link rel="alternate" href="/blog/2013/06/13/sotired/"/>
    <id>/blog/2013/06/13/sotired/</id>
    <published>2013-06-13T05:00:00Z</published>
    <updated>2013-06-13T05:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Day four is done and I’m writing this with my head on the desk.  It’s not that I’m not used to working long days.  The past four days haven’t even been overly stressful or difficult.  I think the problem is that when I’m at MakerSquare, my brain never...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Day four is done and I’m writing this with my head on the desk.  It’s not that I’m not used to working long days.  The past four days haven’t even been overly stressful or difficult.  I think the problem is that when I’m at MakerSquare, my brain never has a chance to go on autopilot.  Normally, everyone has those moments in the day where your higher functions sort of “check out”, and you coast along for a little while to let your brain blow off steam.  I’ve noticed that even when I’m not at my computer my mind is running through everything I’ve learned, and I can’t seem to turn it off.  I suppose in some ways that’s a good thing, but I think I need to make an effort this weekend to do some activity that isn’t coding, re-factoring my existing code, reading blogs about coding, etc. &lt;/p&gt;

&lt;p&gt;With all that being said, I’ve learned a ton in the past 4 days.  Most, if not all of the Ruby work has been review for me.  I spent a ton of time prior to the start of the course learning Ruby on my own, so none of the terms or concepts have been anything I haven’t seen before.  Still, while the concepts and terms are familiar, I noticed today that I am starting to write Ruby much faster than I used to be able to, to the point where I rarely have to stop and think about what I’m doing.&lt;/p&gt;

&lt;p&gt;What’s been surprising to me is how much I’ve liked learning the front end of things.  I came into the course expecting to gravitate towards the back end of web development, especially with my background writing SQL code. I had done some pre-work on HTML and CSS and wrote them off as a little boring and beneath me.  However, Harsh showed us some example websites from experienced developers and designers and I was blown away by how amazing they looked.&lt;/p&gt;

&lt;p&gt;That being said, writing CSS is incredibly difficult.  The thing about SQL and Ruby is, when I look at my code I can have a pretty good idea in my head of what I’m going to get back on the screen.  This is not the case in CSS.  I spent hours today with my head buried in the “Inspect Element” screen of Google Chrome, trying to figure out why the tabs I created this morning wouldn’t line up correctly.  I fixed it by adding another class to my div tag, but I’m sure that will end up biting me in the ass tomorrow. A problem that I’ve noticed with HTML and CSS is, the more elements, tags, classes, ids, etc. that I add to my code, the more problems seem to develop.  &lt;/p&gt;

&lt;p&gt;Apparently, this is a common problem among developers.&lt;/p&gt;

&lt;p&gt;&lt;img alt="SoTired" src="/blog/feed.xmlso-tired1.png" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hire Meeeee</title>
    <link rel="alternate" href="/blog/2013/05/26/hireme/"/>
    <id>/blog/2013/05/26/hireme/</id>
    <published>2013-05-26T05:00:00Z</published>
    <updated>2013-05-26T05:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=STRPsW6IY8k"&gt;HireMe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To any prospective employers reading this blog, I don’t care what salary you offer me, as long as I can ride a scooter in your office.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=STRPsW6IY8k"&gt;HireMe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To any prospective employers reading this blog, I don’t care what salary you offer me, as long as I can ride a scooter in your office.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Foobar</title>
    <link rel="alternate" href="/blog/2013/05/26/foobar/"/>
    <id>/blog/2013/05/26/foobar/</id>
    <published>2013-05-26T05:00:00Z</published>
    <updated>2013-05-26T05:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Why are programmers obsessed with using the terms foo and bar in their code?  I’m trying to get a head start on learning Ruby for the course, but if I see another example in a book or online tutorial where the author is so incredibly un-creative that...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Why are programmers obsessed with using the terms foo and bar in their code?  I’m trying to get a head start on learning Ruby for the course, but if I see another example in a book or online tutorial where the author is so incredibly un-creative that they can’t even think of two descriptive words to use as variables in their code, I’m going to destroy something.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Foobar" src="/blog/feed.xmlfoobar.png" /&gt;&lt;/p&gt;

&lt;p&gt;Harsh, Shehzan, Shaan, et al, you have been warned…&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Two Weeks and Counting</title>
    <link rel="alternate" href="/blog/2013/05/25/twoweeks/"/>
    <id>/blog/2013/05/25/twoweeks/</id>
    <published>2013-05-25T05:00:00Z</published>
    <updated>2013-05-25T05:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;In just over two weeks I will be on the path to a new career in web development, as one of 24 individuals selected to be in the first cohort of MakerSquare students.&lt;/p&gt;

&lt;p&gt;A few months ago, I had a conversation with Jack Zhou, my roommate, and current Dev...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In just over two weeks I will be on the path to a new career in web development, as one of 24 individuals selected to be in the first cohort of MakerSquare students.&lt;/p&gt;

&lt;p&gt;A few months ago, I had a conversation with Jack Zhou, my roommate, and current Dev BootCamp student.  At the time, he had just applied to the program, and was excitedly telling me about how great his career in web development was going to be; how tech companies everywhere were clamoring to get as many devs as they could get their hands on, and treating them like royalty to keep them happy.  He told me that  Dev BootCamp could teach him enough about web development in 9 weeks to get an entry level dev job at one of these companies.  I’m sure I responded with something encouraging, but inside I was thinking, “What a rip-off.”  At the time, I couldn’t understand how you could take a subject as broad as web development, and condense it down into a 9 week course, stuffing enough knowledge inside a student’s head for a company to actually take their job application seriously.  &lt;/p&gt;

&lt;p&gt;Flash forward to today, and not only have two of my roommates left Austin to pursue their own careers in web development, but now I find myself on the same path, albeit with MakerSquare, a fledgling web development bootcamp based in Austin, and cut along the same lines as devBootCamp.  The course will be 10 weeks instead of 9, clearly in order to ensure that I emerge one tenth of a better developer than Jack (kidding), however in all other aspects the goals of the course remain the same.  With any luck, 10 weeks from my start date of June 10th, I will be fending off numerous job offers from Austin employers, with a head full of code.&lt;/p&gt;

&lt;p&gt;It took me awhile to go from dismissing the program as a sinkhole to throw money into, all the way to the next step in my personal development.  While I won’t go into everything that went into my journey from point A to point B, I will invite you to read &lt;a href="http://www.wired.com/wiredenterprise/2013/01/lawyer-turned-coder/"&gt;this Wired article&lt;/a&gt; that helped steer me in the right direction.&lt;/p&gt;

&lt;p&gt;If all goes according to plan, I will be updating this blog regularly with my educational observations, amusing anecdotes, and coding frustrations along the way.  Either that, or this blog will descend into a bunch of memes and apologies for not posting more often.&lt;/p&gt;

&lt;p&gt;We’ll see.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://cdn.tutsplus.com/net.tutsplus.com/authors/jeffreyway/1248951765_kitten-mittens.gif"&gt;Cat&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
