---
title: My First Fully Functional Web App
date: 2013-07-06
tags: 
- Rails
- MakerSquare
---

I made my first real web app last week.   The goal was to create a Blog site, where you could create, read, update, and destroy (**CRUD**) individual blog posts.  As our first real foray into fully functional web apps, the back-end was designed to be simple, with only one Post model, but even so, initially it was a struggle to wrap our heads around how HTTP methods (**GET**, **PUT**, **POST**, **DELETE**, etc.) worked, and how the router worked together with the methods, controller, and views (**MVC**) to deliver the data.

After class was over on Wednesday night, I made my way to Capitol Factory for their Open Hack, where I met up with my mentor, Austin Hughey.  Austin works for Engine Yard and has probably forgotten more about Ruby on Rails than I will ever know.  I had mentioned to him that I was looking for a side project to work on outside of class, and he recommended getting myself familiar with test-driven development (**TDD**).  

For those of you who are not accomplished web developers, test-driven design is a popular software development process where you repeat a very simple development cycle.  First, you build a test, defining what a function or piece of code should do.  Initially, that test will fail, because you haven’t written the code yet.  Next, you build out that function or code, so that when you run the test again, it should pass the test parameters.

It sounds like such a simple and easy concept that initially I was a little disappointed with Austin’s suggestion.  However, at the Open Hack, he spent almost three hours teaching me a language called RSpec, a testing language designed to make test-driven development simple and effective.  After the three hours were over, I had barely scratched the surface of TDD, and had a much deeper respect for it.  

Austin also showed me several other Ruby gems which will undoubtedly come in handy over the next 5 weeks.

**FactoryGirl** is a gem that comes in handy during testing, and lets you create a “factory” of ruby objects, that you can easily create for use during your testing, and then delete once your tests are done.

![Web-App-1](<%= current_page.url %>web-app1.png)

In the above picture you can also see the **Faker** gem, which we touched upon briefly in class.  Austin showed me that Faker can create lots of different kinds of fake data for use during testing and development; names, words, paragraphs, emails, etc, which a developer really appreciates after copying and pasting “I don’t know what to write here - blah blah blah” for the millionth time to create a paragraph of text.

Austin also introduced me to **Pry**, a gem that allows you to pause the execution of your Ruby code, go into your console, and examine the current state of your code, all of your variables, the existing of any objects, etc.  After a brief look at the github documentation, it looks like Pry actually has a lot more useful functions that I will need to dive into at some point, however, that one function has saved me a lot of time while debugging.

On Thursday, July 4th, I ended up going into the MakerSquare office, and redoing all of the tests I had created with Austin the night before, to cement them in my mind.  I also took a look at a [RailsCasts](http://www.railscasts.com/episodes/417-foundation) video on ZURB’s Foundation, a front-end framework similar to Twitter Bootstrap.  At that point I had worked out all of the kinks in the back-end of my web app, but the front end was still bare-boned and under-developed.

After a couple of hours of work, fiddling around with their grid system, I came up with the following.

![Web-App-2](<%= current_page.url %>web-app2.png)

It may just be that I have more experience with front-end design at this point, or that I have just been overloaded with Bootstrap-esque web pages, but I find Foundation to be much easier to work with.  Not once did I want to throw my laptop against the wall, which was a big development for me.

For those of you who are more technically inclined, you can check out my code on my github account here: [GITHUB](https://github.com/sdrioux/Blog-App).

To check out the front end of my app, you can try checking it out on Heroku, at silas-blog-app.herokuapp.com.  I say try because currently Heroku is being stubborn and will not display my app.  Fingers crossed it will be up and running soon.